* Tixlys Core Architecture
- Microservices
- Totally Event Driven
** Services
- following are the services needed for tixlys working
*** steersman (version: 0.x.x):
- pingora proxy
- ssl termination
- security and auth (mock)
*** events (version: 0.x.x)
- create events
- update events
- delete events
- get events
- list events
- add to calendar (action)
*** contacts (version: 0.x.x)
- create contact
- delete contact
- update contact
- get contact
- import phone contacts (action)
- import email contacts (action)
*** template hub (version: 0.x.x)
- create templates
- delete template
- update template
- get templates
*** notification (version: 0.x.x)
- notify(type, template)
*** sphynx (version: 0.x.x)
- user management
- authentication
- authorization
*** booking (version: 0.x.x)
- book event
- set reminder for booked event
- get booked event info
- get all booked event
- cancel booked event


* Crates
- crates and functionalities which we would like to create
** command-bus
- ephimerial queue for commands
- deletes data after 7 days (programmable) for crash handling
- commands would be stored in sqlite
- once executed completed_at would be marked.
** event-store
- replicated store to tixlys cloud server.
- usual event store where events are stored.
** cqrs
- framework that brings the following together
  + aggregator
  + events
  + commands
  + queries
  + stores
** quic http framework [NOT]
- to give the fast event source edge.
- Not yet ready, no need.
** io_uring runtime. [NOT]
- to make the application even faster while running all the above.
- not much performance gains.
* LRU Cache:
- aggregate in memory for quick retrieval of aggregates
- sqlite connection pool
* Authorization in our system:
- biscuit token [[https://doc.biscuitsec.org/getting-started/my-first-biscuit][My First Biscuit - Biscuit]]
- need a database to map user_id to initial authority datalog block
  - facts (depending on subscription)
  - rules (based on facts above)
  - checks (depending on subscription)
- create authorizer datalog
  - facts, rules
  - create checks
  - create policies.










* Environment: Slack UI
- budget
- location
- type of event
  - web scraper ai agent
    - location
    - weather , others events, amount of peopel, type

- org decides based on budget / promps / type of events / other things happening
  - suggests things?

- graphic designer ai agent
  - type of events and designs something based on location and type of people

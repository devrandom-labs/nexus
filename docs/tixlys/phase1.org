#+TITLE: Tixlys (Open Resale API) - Project Plan (keriox Enhanced) - Phase 0 Kanban Tasks
#+AUTHOR: Startup Idea Project Manager (Gemini)
#+DATE: 2025-05-19
#+LANGUAGE: en
#+OPTIONS: toc:nil num:nil H:5

:PROPERTIES:
:PROJECT_NAME: Tixlys (Open Resale API)
:VERSION: 0.2.0
:PRIMARY_TECHNOLOGY: Rust
:KERI_LIBRARY: keriox
:PROJECT_STATUS: Planning
:END:

* Phase 0: Foundation - `keriox` Integration & ACDC-based Tickets (Core Verifiability)
  :PROPERTIES:
  :ESTIMATED_ITERATIONS: 3-5
  :GOAL: Establish the KERI-based foundation using `keriox`, with tickets modeled as ACDCs, incorporating expert KERI/ACDC best practices.
  :END:

** Iteration 0.1: `keriox` Setup and Initial Environment Configuration
   :GOAL: Integrate `keriox` library and establish a basic working environment.
   :KANBAN_COLUMN: Backlog -> To Do (Current Iteration)

   - [ ] TODO **Task 0.1.1: Add `keriox` Dependency & Initial Build**
     - *Deliverable:* `keriox` added to `Cargo.toml`, project compiles successfully.
     - *Details:* Resolve any initial compilation or dependency issues.
   - [ ] TODO **Task 0.1.2: Basic `keriox` Familiarization**
     - *Deliverable:* Developer has reviewed `keriox` core concepts (AIDs, KELs, Registries, Signatures, Event Messages, ACDC concepts from docs/examples).
     - *Details:* Focus on understanding the lifecycle of an identifier and the basic structure of an ACDC within `keriox`. Reference provided `keriox` documentation and ACDC overview PDFs.
   - [ ] TODO **Task 0.1.3: Configure Minimal `keriox` Environment**
     - *Deliverable:* Code to initialize a basic `keriox` environment (its database/storage, e.g., Redb or a supported backend).
     - *Details:* Determine and implement storage for KELs and other KERI artifacts managed by `keriox`. This is *not* the main application PostgreSQL DB yet.
   - [ ] TODO **Task 0.1.4: Setup Tixlys Custodial Wallet (Conceptual)**
     - *Deliverable:* Plan and initial code structure for managing Tixlys's own keys for custodial operations via `keriox`.
     - *Details:* How will Tixlys store and access the private keys it needs to manage on behalf of organizers/fans (initially)? Secure storage considerations (e.g., environment variables for keys, KMS integration - keep simple for now).

** Iteration 0.2: KERI Identifier Strategy & Core Data Structures
   :GOAL: Define how Organizers and Fans are represented as KERI AIDs and design initial Rust structs.
   :KANBAN_COLUMN: Backlog

   - [ ] TODO **Task 0.2.1: Implement Custodial AID Creation for Organizers**
     - *Deliverable:* A Rust function/service that uses `keriox` to generate a new KERI AID and securely store its keys (custodially by Tixlys).
     - *Details:* This AID will represent an Event Organizer.
   - [ ] TODO **Task 0.2.2: Implement Custodial AID Creation for Fans (Initial)**
     - *Deliverable:* A Rust function/service similar to 0.2.1 for creating Fan AIDs custodially.
     - *Details:* Keep it simple; fan interaction with their AID is out of scope for Phase 0.
   - [ ] TODO **Task 0.2.3: Define `OrganizerProfile` Rust Struct**
     - *Deliverable:* Rust struct `OrganizerProfile { tixlys_id: String, keri_aid: String, api_key_hash: String, ... }`.
     - *Details:* Include fields for linking to the `keriox`-managed KERI AID.
   - [ ] TODO **Task 0.2.4: Define `EventDetails` Rust Struct**
     - *Deliverable:* Rust struct `EventDetails { event_id: String, organizer_aid: String, name: String, ... }`.
     - *Details:* Link to the Organizer's KERI AID.
   - [ ] TODO **Task 0.2.5: Define Initial `TicketACDC` Payload Rust Struct**
     - *Deliverable:* Rust struct `TicketACDC { event_id: String, seat_info: String, face_value: f64, current_owner_aid: String, rules_snapshot_said: Option<String>, issuer_aid: String }`.
     - *Details:* This represents the data *inside* the ACDC. `issuer_aid` will be the Organizer's AID. `current_owner_aid` initially might be the Organizer's AID or a Tixlys-held AID.
   - [ ] TODO **Task 0.2.6: Define `ResaleRule` Rust Struct (Placeholder)**
     - *Deliverable:* Basic Rust struct `ResaleRule { rule_id: String, description: String, ... }`.
     - *Details:* We will make this an ACDC later. For now, a simple structure to acknowledge its existence.

** Iteration 0.3: Ticket ACDC Issuance & Basic Database Schema
   :GOAL: Issue a ticket as an ACDC using `keriox` and set up the initial PostgreSQL schema.
   :KANBAN_COLUMN: Backlog

   - [ ] TODO **Task 0.3.1: Develop `keriox`-backed Service for Ticket ACDC Issuance**
     - *Deliverable:* A Rust service function: `issue_ticket_acdc(organizer_aid: &str, ticket_data: TicketACDC) -> Result<String, Error>` that:
       - Takes `TicketACDC` payload data.
       - Uses the `organizer_aid` (managed by Tixlys via `keriox`) to sign and issue an ACDC.
       - `keriox` computes and returns the SAID of the Ticket ACDC.
       - The KERI event for ACDC issuance is anchored in the Organizer's KEL.
     - *Details:* This is a core piece. Focus on the `keriox` interaction for creating and registering the ACDC. The returned SAID is the `TicketIdentifier`.
   - [ ] TODO **Task 0.3.2: PostgreSQL Schema v0.4 - Organizers, Events**
     - *Deliverable:* SQL migration script for `Organizers` and `Events` tables in PostgreSQL.
     - *Details:* `Organizers` table to store `OrganizerProfile` data. `Events` table for `EventDetails`.
   - [ ] TODO **Task 0.3.3: PostgreSQL Schema v0.4 - Tickets Table**
     - *Deliverable:* SQL migration script for `Tickets` table.
     - *Details:* Columns: `acdc_said` (PRIMARY KEY, TEXT), `event_id_fk` (TEXT/INT), `issuer_aid_cache` (TEXT), `current_owner_aid_cache` (TEXT), `status_cache` (TEXT, e.g., "issued", "transferred", "redeemed").
     - *Note:* This table caches ACDC data for quick lookup. Truth remains in KERI.
   - [ ] TODO **Task 0.3.4: Store Issued Ticket ACDC SAID in App DB**
     - *Deliverable:* Logic within the issuance service (Task 0.3.1) to store the new `acdc_said` and relevant cached fields into the PostgreSQL `Tickets` table.

** Iteration 0.4: Ticket ACDC Validation & Initial State Management
   :GOAL: Validate an ACDC and manage its basic state.
   :KANBAN_COLUMN: Backlog

   - [ ] TODO **Task 0.4.1: Develop `keriox`-backed Service for Ticket ACDC Validation**
     - *Deliverable:* A Rust service function: `validate_ticket_acdc(acdc_said: &str) -> Result<TicketValidationStatus, Error>`.
     - *Details:*
       - Given an `acdc_said`, use `keriox` to retrieve the ACDC.
       - Verify its schema (once defined) and issuer's signature against the issuer's KEL.
       - Check for KERI-based status (e.g., "revoked", "redeemed" - very basic for now).
       - `TicketValidationStatus` could include current owner AID, validity.
   - [ ] TODO **Task 0.4.2: Define `TicketState` Rust Struct (for App DB Cache)**
     - *Deliverable:* Rust struct `TicketState { acdc_said: String, last_known_keri_event_sn_or_said: Option<String>, current_owner_aid_cache: String, status_cache: String }`.
     - *Details:* This mirrors the `Tickets` table structure for application logic.
   - [ ] TODO **Task 0.4.3: [INVESTIGATION] `keriox` ACDC Chaining Mechanism**
     - *Deliverable:* Document summarizing how `keriox` supports creating a new ACDC that explicitly replaces/chains from a previous one (e.g., specific functions, data structures, or event types like `p.s`, `o.s` in envelope, or custom fields).
     - *Details:* Critical for understanding how ticket transfers will be represented. Review `keriox` source/tests if documentation is sparse. Refer to ACDC overview PDFs.
   - [ ] TODO **Task 0.4.4: [INVESTIGATION] `keriox` ACDC Status Management/Revocation**
     - *Deliverable:* Document summarizing how an issuer can mark an ACDC (by SAID) as "redeemed," "transferred," or "revoked" using `keriox`.
     - *Details:* Does `keriox` offer specific status registry KELs/mechanisms, or will Tixlys use generic KERI events on the issuer's KEL? This impacts validation.

** Iteration 0.5: Rudimentary Ticket Transfer & Testing
   :GOAL: Outline and implement a highly simplified ACDC transfer and establish a test suite.
   :KANBAN_COLUMN: Backlog

   - [ ] TODO **Task 0.5.1: Define Transfer Authorization Message Structure (Conceptual)**
     - *Deliverable:* JSON (or other format) structure for a message signed by the current owner authorizing a transfer (e.g., `{ "ticket_acdc_said": "...", "new_owner_aid": "..." }`).
     - *Details:* This is a placeholder for Phase 2, but good to think about the data needed.
   - [ ] TODO **Task 0.5.2: Develop `keriox`-backed Service for Ticket ACDC Transfer (Simplified)**
     - *Deliverable:* A Rust service function: `transfer_ticket_acdc(old_acdc_said: &str, new_owner_aid: &str, transfer_auth_msg: &SignedAuthMsg) -> Result<String, Error>`.
     - *Details (Simplified for Phase 0):*
       - Assume `transfer_auth_msg` is valid for now (verification later).
       - Organizer's AID issues a *new, chained ACDC* to `new_owner_aid`, linking to `old_acdc_said` (using findings from Task 0.4.3).
       - Organizer's AID issues a KERI event marking `old_acdc_said` as "transferred" (using findings from Task 0.4.4).
       - Update app DB cache for both old and new ACDCs.
       - Return SAID of the *new* Ticket ACDC.
   - [ ] TODO **Task 0.5.3: Internal Test Suite Setup**
     - *Deliverable:* Basic Rust integration test setup (`#[test]`).
   - [ ] TODO **Task 0.5.4: Write Tests for AID Creation & ACDC Issuance/Validation**
     - *Deliverable:* Integration tests covering:
       - Creating Organizer/Fan AIDs.
       - Issuing a Ticket ACDC.
       - Validating an issued Ticket ACDC.
       - Validating that an unknown ACDC SAID fails validation.
   - [ ] TODO **Task 0.5.5: Write Tests for Simplified ACDC Transfer**
     - *Deliverable:* Integration tests covering:
       - Transferring a ticket ACDC.
       - Validating the new ACDC belongs to the new owner.
       - Validating the old ACDC is marked/shown as transferred (or superseded).
   - [ ] TODO **Task 0.5.6: [INVESTIGATION] Event Anchoring for ACDCs in `keriox`**
     - *Deliverable:* Confirmation of default `keriox` behavior (issuer's KEL vs. dedicated KELs for ACDC events) and a decision on the Tixlys approach (likely issuer's KEL initially for simplicity).

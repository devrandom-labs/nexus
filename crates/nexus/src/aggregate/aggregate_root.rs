use super::{
    Aggregate, AggregateCommandHandler, AggregateState, AggregateType,
    command_handler::CommandHandlerResponse,
};
use crate::Command;

/// Concrete implementation managing an aggregate's state based on events.
/// Generic over the aggregate definition provided by `AT: AggregateType`.
#[derive(Debug)]
pub struct AggregateRoot<AT: AggregateType> {
    id: AT::Id,
    state: AT::State,
    /// The version loaded from the event store (number of events historically applied).
    version: u64,
    /// Events generated by the last command execution, not yet persisted.
    uncommitted_events: Vec<AT::Event>,
}

impl<AT> Aggregate for AggregateRoot<AT>
where
    AT: AggregateType,
{
    type Id = AT::Id;
    type Event = AT::Event;
    type State = AT::State;

    fn id(&self) -> &Self::Id {
        &self.id
    }

    fn state(&self) -> &Self::State {
        &self.state
    }

    fn version(&self) -> u64 {
        self.version
    }

    fn take_uncommitted_events(&mut self) -> Vec<Self::Event> {
        std::mem::take(&mut self.uncommitted_events)
    }
}

impl<AT> AggregateRoot<AT>
where
    AT: AggregateType,
{
    /// Creates a new aggregate instance with default state and version 0.
    pub fn new(id: AT::Id) -> Self {
        Self {
            id,
            state: AT::State::default(),
            version: 0,
            uncommitted_events: Vec::new(),
        }
    }

    /// Rehydrates aggregate state by applying historical events.
    pub fn load_from_history(id: AT::Id, history: impl IntoIterator<Item = AT::Event>) -> Self {
        let mut state = AT::State::default();
        let mut version = 0u64;

        for event in history {
            state.apply(&event);
            version += 1;
        }

        Self {
            id,
            state,
            version,
            uncommitted_events: Vec::new(),
        }
    }

    /// Gets the effective current version, including uncommitted events.
    /// Useful for repositories implementing optimistic concurrency checks.
    pub fn current_version(&self) -> u64 {
        self.version + self.uncommitted_events.len() as u64
    }

    pub async fn execute<C, Handler, Services>(
        &mut self,
        command: C,
        handler: &Handler,
        services: &Services,
    ) -> Result<C::Result, C::Error>
    where
        C: Command,
        Handler: AggregateCommandHandler<C, Services, State = AT::State>,
        Services: Send + Sync + ?Sized,
    {
        let CommandHandlerResponse { events, result } =
            handler.handle(&self.state, command, services).await?;
        for event in &events {
            self.state.apply(event);
        }
        self.uncommitted_events.extend(events);
        Ok(result)
    }
}

#[cfg(test)]
mod tests {
    use super::{AggregateRoot, AggregateType};
    use crate::{DomainEvent, Message, aggregate::AggregateState};
    use serde::{Deserialize, Serialize};

    #[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
    enum UserEvents {
        UserCreated { name: String },
    }
    // TODO: make it a derive trait? if we derive DomainEvent, it automatically derives Message
    impl Message for UserEvents {}
    impl DomainEvent for UserEvents {}

    #[derive(Debug, Default)]
    struct UserState {
        name: String,
    }

    impl AggregateState for UserState {
        type Event = UserEvents;
        fn apply(&mut self, event: &Self::Event) {
            match event {
                UserEvents::UserCreated { name } => self.name = name.to_string(),
            }
        }
    }

    #[derive(Debug, Clone, Copy)]
    struct User;
    impl AggregateType for User {
        type Id = String;
        type Event = UserEvents;
        type State = UserState;
    }

    #[test]
    fn create_an_aggregate() {
        let _root = AggregateRoot::<User>::new(String::from("id"));
    }
}
